@mixin render-var-map($paletteName, $themeName) {
    @if type-of($paletteName) == 'string' and type-of($themeName) {
        @if ($paletteName != $paletteDefault) {
            @if ($themeName == $themeDefault) {
                $themeMap: map-get($colorsGenerator, $themeName);
                $lightMap: map-get($colorsGenerator, 'light');
                @each $colorName, $modifiers in $themeMap {
                    $setModifier: map-get($modifiers, 'modifier');
                    $setValue: map-get($modifiers, 'value');
                    $setColorKey: map-get($modifiers, 'colorKey');
                    $setColor: map-deep-get($palettes, $paletteName, $setColorKey);
                    @if (is-falsy($setModifier) and is-falsy($setValue)) {
                        --#{$colorName}: #{$setColor};
                    } @else {
                        $generateColor: call(get-function($setModifier), $setColor, $setValue);
                        --#{$colorName}: #{$generateColor};
                    }
                }
                @if type-of($lightMap) == 'map' and length($lightMap) > 0 {
                    @each $colorName, $modifiers in $lightMap {
                        $setModifier: map-get($modifiers, 'modifier');
                        $setValue: map-get($modifiers, 'value');
                        $setColorKey: map-get($modifiers, 'colorKey');
                        $setColor: map-deep-get($palettes, $paletteName, $setColorKey);
                        @if (is-falsy($setModifier) and is-falsy($setValue)) {
                            --#{$colorName}: #{$setColor};
                        } @else {
                            $generateColor: call(get-function($setModifier), $setColor, $setValue);
                            --#{$colorName}: #{$generateColor};
                        }
                    }
                }
            } @else {
                $themeMap: map-get($colorsGenerator, $themeName);
                @if type-of($themeMap) == 'map' and length($themeMap) > 0 {
                    @if type-of($referenceMap) == 'map' and length($referenceMap) > 0 {
                        @each $colorName, $colorRef in $referenceMap {
                            --#{$colorName}: var(--#{$colorRef});
                        }
                    }
                }
            }
        } @else {
            @if ($themeName == $themeDefault) {
                $themeMap: map-get($colors, $themeName);
                $lightMap: map-get($colors, 'light');
                @each $colorName, $color in $themeMap {
                    --#{$colorName}: #{$color};
                }
                @if type-of($lightMap) == 'map' and length($lightMap) > 0 {
                    @each $colorName, $color in $lightMap {
                        --#{$colorName}: #{$color};
                    }
                }
            } @else {
                $themeMap: map-get($colors, $themeName);
                @if type-of($themeMap) == 'map' and length($themeMap) > 0 {
                    @if type-of($referenceMap) == 'map' and length($referenceMap) > 0 {
                        @each $colorName, $colorRef in $referenceMap {
                            --#{$colorName}: var(--#{$colorRef});
                        }
                    }
                }
            }
        }
    } @else {
        @error 'Please supply a map of vars and a pallete name as string.';
    }
}
